// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Conveyor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Conveyor.proto</summary>
public static partial class ConveyorReflection {

  #region Descriptor
  /// <summary>File descriptor for Conveyor.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ConveyorReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5Db252ZXlvci5wcm90byKNAQoNQ29udmV5b3JfRGF0YRIPCgJpZBgBIAEo",
          "BUgAiAEBEhUKCGlzT3BlbmVkGAIgASgISAGIAQESEgoFc3BlZWQYAyABKAJI",
          "AogBARIVCghkYXRhVGltZRgEIAEoCUgDiAEBQgUKA19pZEILCglfaXNPcGVu",
          "ZWRCCAoGX3NwZWVkQgsKCV9kYXRhVGltZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Conveyor_Data), global::Conveyor_Data.Parser, new[]{ "Id", "IsOpened", "Speed", "DataTime" }, new[]{ "Id", "IsOpened", "Speed", "DataTime" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Conveyor_Data : pb::IMessage<Conveyor_Data>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Conveyor_Data> _parser = new pb::MessageParser<Conveyor_Data>(() => new Conveyor_Data());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Conveyor_Data> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ConveyorReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Conveyor_Data() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Conveyor_Data(Conveyor_Data other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    isOpened_ = other.isOpened_;
    speed_ = other.speed_;
    dataTime_ = other.dataTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Conveyor_Data Clone() {
    return new Conveyor_Data(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "isOpened" field.</summary>
  public const int IsOpenedFieldNumber = 2;
  private readonly static bool IsOpenedDefaultValue = false;

  private bool isOpened_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpened {
    get { if ((_hasBits0 & 2) != 0) { return isOpened_; } else { return IsOpenedDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isOpened_ = value;
    }
  }
  /// <summary>Gets whether the "isOpened" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsOpened {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "isOpened" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsOpened() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "speed" field.</summary>
  public const int SpeedFieldNumber = 3;
  private readonly static float SpeedDefaultValue = 0F;

  private float speed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Speed {
    get { if ((_hasBits0 & 4) != 0) { return speed_; } else { return SpeedDefaultValue; } }
    set {
      _hasBits0 |= 4;
      speed_ = value;
    }
  }
  /// <summary>Gets whether the "speed" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSpeed {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "speed" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSpeed() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "dataTime" field.</summary>
  public const int DataTimeFieldNumber = 4;
  private readonly static string DataTimeDefaultValue = "";

  private string dataTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DataTime {
    get { return dataTime_ ?? DataTimeDefaultValue; }
    set {
      dataTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "dataTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDataTime {
    get { return dataTime_ != null; }
  }
  /// <summary>Clears the value of the "dataTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDataTime() {
    dataTime_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Conveyor_Data);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Conveyor_Data other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (IsOpened != other.IsOpened) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
    if (DataTime != other.DataTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasIsOpened) hash ^= IsOpened.GetHashCode();
    if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
    if (HasDataTime) hash ^= DataTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasIsOpened) {
      output.WriteRawTag(16);
      output.WriteBool(IsOpened);
    }
    if (HasSpeed) {
      output.WriteRawTag(29);
      output.WriteFloat(Speed);
    }
    if (HasDataTime) {
      output.WriteRawTag(34);
      output.WriteString(DataTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasIsOpened) {
      output.WriteRawTag(16);
      output.WriteBool(IsOpened);
    }
    if (HasSpeed) {
      output.WriteRawTag(29);
      output.WriteFloat(Speed);
    }
    if (HasDataTime) {
      output.WriteRawTag(34);
      output.WriteString(DataTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasIsOpened) {
      size += 1 + 1;
    }
    if (HasSpeed) {
      size += 1 + 4;
    }
    if (HasDataTime) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Conveyor_Data other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasIsOpened) {
      IsOpened = other.IsOpened;
    }
    if (other.HasSpeed) {
      Speed = other.Speed;
    }
    if (other.HasDataTime) {
      DataTime = other.DataTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          IsOpened = input.ReadBool();
          break;
        }
        case 29: {
          Speed = input.ReadFloat();
          break;
        }
        case 34: {
          DataTime = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          IsOpened = input.ReadBool();
          break;
        }
        case 29: {
          Speed = input.ReadFloat();
          break;
        }
        case 34: {
          DataTime = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
